name: UX Regression Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: read

jobs:
  test-and-review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR files and changes
        id: pr-files
        run: |
          # Get changed files with patch data
          FILES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | \
            jq -r '[.[] | {filename: .filename, patch: .patch}] | @json')

          if [ -z "$FILES" ]; then
            echo "Error: Failed to fetch or parse PR files."
            exit 1
          fi

          echo "files=$FILES" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install
        
      - name: Run tests and capture results
        id: test-run
        run: |
          # Run tests and save output, don't fail on test failures
          npm test -- --json --outputFile=test-results.json || true
          
          # Check if there were any failures and set output
          TEST_STATUS=$(cat test-results.json | jq -r '.success')
          echo "test-status=$TEST_STATUS" >> $GITHUB_OUTPUT
          
          # Save test results for Devin to analyze
          TEST_OUTPUT=$(cat test-results.json | jq -c .)
          echo "test-output=$TEST_OUTPUT" >> $GITHUB_OUTPUT

      - name: Create Devin Review Session
        id: devin-review
        env:
          DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
          TEST_STATUS: ${{ steps.test-run.outputs.test-status }}
          TEST_OUTPUT: ${{ steps.test-run.outputs.test-output }}
          FILES_TO_REVIEW: ${{ steps.pr-files.outputs.files }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
          REVIEW_PROMPT: |
            You are UX Regression Reviewer Devin. Your behavior depends on whether you find regressions or not:

            IF NO REGRESSIONS FOUND:
            - Create a general PR review comment:
            ```
            # UI Review Summary âœ…
            
            ## Test Results
            - All snapshot tests passing
            - Component styling consistent with patterns
            - No visual regressions detected
            
            ## Analyzed Components
            [List components you checked]
            
            Great work maintaining UI consistency!
            ```

            IF REGRESSIONS FOUND:
            1. DO NOT create a general review comment
            2. Instead, create a single inline suggestion comment exactly where the regression is
            3. Use this format for the suggestion:
            ```suggestion
            [exact line of code that should be here]
            ```
            [Brief explanation of why this change is needed and what pattern it's restoring]

            Example of correct regression suggestion:
            On the exact line where bg-red-50 was removed:
            ```suggestion
                        <div className="mt-2 p-2 bg-red-50 rounded text-sm overflow-x-auto font-mono">
            ```
            Restoring error background styling that matches our logging component pattern.

            Rules for Regression Fixes:
            1. One suggestion per regression
            2. Comment directly on the line needing fixing
            3. Use exact suggestion syntax for committable changes
            4. Keep explanation focused on the specific regression
            5. Reference the established pattern being restored

            Changed Files:
            ${{ steps.pr-files.outputs.files }}

            Test Results:
            Status: ${{ steps.test-run.outputs.test-status }}
            Details: ${{ steps.test-run.outputs.test-output }}

        run: |
          # Convert multiline string to JSON-safe format
          ESCAPED_PROMPT=$(echo "$REVIEW_PROMPT" | jq -Rs .)

          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $DEVIN_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{\"prompt\": $ESCAPED_PROMPT}" \
            "https://api.devin.ai/v1/sessions")

          # Check for errors in the response
          ERROR_MSG=$(echo "$RESPONSE" | jq -r '.error')
          if [ "$ERROR_MSG" != "null" ]; then
            echo "Error creating Devin session: $ERROR_MSG"
            exit 1
          fi

          SESSION_ID=$(echo "$RESPONSE" | jq -r '.session_id')
          SESSION_URL=$(echo "$RESPONSE" | jq -r '.url')

          if [ -z "$SESSION_ID" ] || [ -z "$SESSION_URL" ]; then
            echo "Error: Devin session details are missing from the response."
            exit 1
          fi

          echo "session-id=$SESSION_ID" >> $GITHUB_OUTPUT
          echo "session-url=$SESSION_URL" >> $GITHUB_OUTPUT
          echo "Devin session created successfully: $RESPONSE"
