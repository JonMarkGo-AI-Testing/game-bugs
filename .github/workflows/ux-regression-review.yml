name: UX Regression Review

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  pull-requests: write
  contents: read

jobs:
  test-and-review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install
        
      - name: Run tests and capture results
        id: test-run
        run: |
          # Run tests and save output, don't fail on test failures
          npm test -- --json --outputFile=test-results.json || true
          
          # Check if there were any failures and set output
          TEST_STATUS=$(cat test-results.json | jq -r '.success')
          echo "test-status=$TEST_STATUS" >> $GITHUB_OUTPUT
          
          # Save test results for Devin to analyze
          TEST_OUTPUT=$(cat test-results.json | jq -c .)
          echo "test-output=$TEST_OUTPUT" >> $GITHUB_OUTPUT

      - name: Create Devin Review Session
        id: devin-review
        env:
          DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
          TEST_STATUS: ${{ steps.test-run.outputs.test-status }}
          TEST_OUTPUT: ${{ steps.test-run.outputs.test-output }}
          
          REVIEW_PROMPT: |
            You are UX Regression Reviewer Devin. Your behavior depends on whether you find regressions or not:

            IF NO REGRESSIONS FOUND:
            Return a JSON response in this format:
            {
              "hasRegressions": false,
              "comment": "# UI Review Summary âœ…\n\n## Test Results\n- All snapshot tests passing\n- Component styling consistent with patterns\n- No visual regressions detected\n\n## Analyzed Components\n[List components you checked]\n\nGreat work maintaining UI consistency!"
            }

            IF REGRESSIONS FOUND:
            Return a JSON response in this format:
            {
              "hasRegressions": true,
              "filePath": "src/components/logs/LogEntry.tsx",  // Path to file with regression
              "line": 50,  // Line number where fix is needed
              "suggestion": "<div className=\"mt-2 p-2 bg-red-50 rounded text-sm overflow-x-auto font-mono\">",  // The exact code that should be there
              "explanation": "Restoring error background styling that matches our logging component pattern."  // Brief explanation
            }

            Test Results:
            Status: ${{ steps.test-run.outputs.test-status }}
            Details: ${{ steps.test-run.outputs.test-output }}

        run: |
          # Convert multiline string to JSON-safe format
          ESCAPED_PROMPT=$(echo "$REVIEW_PROMPT" | jq -Rs .)

          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $DEVIN_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{\"prompt\": $ESCAPED_PROMPT}" \
            "https://api.devin.ai/v1/sessions")

          # Parse Devin's response and save it
          DEVIN_ANALYSIS=$(echo "$RESPONSE" | jq -r '.message')
          echo "devin-analysis=$DEVIN_ANALYSIS" >> $GITHUB_OUTPUT

      - name: Process Devin's Review
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const devinAnalysis = JSON.parse('${{ steps.devin-review.outputs.devin-analysis }}');
            
            if (devinAnalysis.hasRegressions) {
              // Create a suggestion comment for the regression
              await github.rest.pulls.createReviewComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                commit_id: context.payload.pull_request.head.sha,
                path: devinAnalysis.filePath,
                line: devinAnalysis.line,
                body: `\`\`\`suggestion\n${devinAnalysis.suggestion}\n\`\`\`\n${devinAnalysis.explanation}`
              });
            } else {
              // Create a general review comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: devinAnalysis.comment
              });
            }